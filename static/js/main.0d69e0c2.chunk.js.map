{"version":3,"sources":["data.js","components/Product.js","components/Stock.js","components/TabContent.js","components/Detail.js","components/Cart.js","App.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","img","Product","props","stocks","useContext","StocksContext","className","to","item","src","width","Stock","stock","TabContent","useEffect","스위치변경","누른탭","React","Component","박스","styled","div","제목","h4","색상","connect","state","console","log","장바구니state","reducer","useState","alert","alert변경","누른탭변경","스위치","구매수량","구매수량변경","타이머","setTimeout","clearTimeout","useParams","history","useHistory","shoe","shoes","find","Form","Group","controlId","Label","Control","as","custom","onChange","e","target","value","selected","onClick","dispatch","type","payload","name","quan","push","goBack","Nav","variant","defaultActiveKey","Item","Link","eventKey","CSSTransition","in","classNames","timeout","alert열렸니","장바구니alertReducer","Table","responsive","map","createContext","App","Data","shoes변경","stocks변경","stocks추가","newArray","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","NavDropdown","Divider","exact","path","Jumbotron","Button","Provider","axios","get","then","result","data","shoes추가","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","장바구니초기값","store","createStore","combineReducers","액션","copy","Number","newQuantity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d69e0c2.chunk.js","sourcesContent":["export default [\n  {\n    id: 0,\n    title: 'White and Black',\n    content: 'Born in France',\n    price: 120000,\n    img: 'https://codingapple1.github.io/shop/shoes1.jpg'\n  },\n\n  {\n    id: 1,\n    title: 'Red Knit',\n    content: 'Born in Seoul',\n    price: 110000,\n    img: 'https://codingapple1.github.io/shop/shoes2.jpg'\n  },\n\n  {\n    id: 2,\n    title: 'Grey Yordan',\n    content: 'Born in the States',\n    price: 130000,\n    img: 'https://codingapple1.github.io/shop/shoes3.jpg'\n  }\n]","import React, { useContext } from \"react\";\nimport App, { StocksContext } from \"../App\";\nimport { Link } from \"react-router-dom\";\n\nfunction Product(props) {\n  let stocks = useContext(StocksContext);\n  return (\n    <div className=\"col-md-4\">\n      <Link to={`/detail/${props.item.id}`}>\n        <img src={props.item.img} width=\"100%\" />\n      </Link>\n      <h4>{props.item.title}</h4>\n      <p>\n        {props.item.content} & {props.item.price}원\n      </p>\n      <p>재고 : {stocks[props.item.id]}</p>\n    </div>\n  );\n}\n\nexport default Product;\n","import React from \"react\";\n\nfunction Stock(props) {\n  return <p>재고 : {props.stock}</p>;\n}\n\nexport default Stock;\n","import React, { useEffect } from \"react\";\n\nfunction TabContent(props) {\n  useEffect(() => {\n    props.스위치변경(true);\n  });\n\n  if (props.누른탭 === 0) {\n    return <div className=\"mt-5\">상세 설명 페이지</div>;\n  } else if (props.누른탭 === 1) {\n    return <div className=\"mt-5\">이용 후기 페이지</div>;\n  } else if (props.누른탭 === 2) {\n    return <div className=\"mt-5\">Q&A 페이지</div>;\n  } else {\n    return <div className=\"mt-5\">모르는 내용</div>;\n  }\n}\n\nexport default TabContent;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Nav, Form } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport \"../css/Detail.scss\";\nimport Stock from \"./Stock\";\nimport TabContent from \"./TabContent\";\n\nimport { StocksContext } from \"../App\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n\n// Life Cycle Hook 옛날에는 이렇게 component 생명 주기 관리.\n// 생성, 재랜더링, 삭제\nclass Detail2 extends React.Component {\n  componentDidMount() {\n    //Detail2 컴포넌트가 Mount 되고나서 실행할 코드\n  }\n\n  componentWillUnmount() {\n    //Detail2 컴포넌트가 Unmount 되기전에 실행할 코드\n  }\n}\n\nlet 박스 = styled.div`\n  padding: 20px;\n`;\nlet 제목 = styled.h4`\n  font-size: 20px;\n  color: ${(props) => props.색상};\n`;\n\nfunction Detail(props) {\n  let [alert, alert변경] = useState(true);\n  let [입력값, 입력값변경] = useState(\"\");\n  let stocks = useContext(StocksContext);\n  let [누른탭, 누른탭변경] = useState(0);\n  let [스위치, 스위치변경] = useState(false);\n  let [구매수량, 구매수량변경] = useState(1);\n\n  let changeValue = (e) => {\n    입력값변경(e.target.value);\n  };\n\n  let submitValue = () => {\n    console.log(입력값);\n  };\n\n  useEffect(() => {\n    console.log(\"created\");\n    let 타이머 = setTimeout(() => {\n      // document.getElementById(\"my-alert\").style.display=\"none\";\n      console.log(\"alert 실행\");\n      alert변경(false);\n    }, 2000);\n\n    return () => {\n      clearTimeout(타이머);\n      console.log(\"exit\");\n    };\n  }, [alert]);\n\n  let { id } = useParams();\n  let history = useHistory();\n\n  let shoe = props.shoes.find((item) => item.id == id);\n\n  if (shoe == null) return <div>없는 상품입니다.</div>;\n\n  return (\n    <div className=\"container\">\n      <박스>\n        <제목 색상=\"blue\">Detail</제목>\n      </박스>\n\n      {/*<input onChange={changeValue} />*/}\n      {/*<button onClick={submitValue}>입력</button>*/}\n\n      {alert === true ? (\n        <div id=\"my-alert\" className=\"my-alert\">\n          <p>재고가 얼마 남지 않았습니다.</p>\n        </div>\n      ) : null}\n\n      {/*<div name=\"my-alert\" className=\"my-alert-red\">*/}\n      {/*  <p>재고가 얼마 남지 않았습니다.</p>*/}\n      {/*</div>*/}\n      {/*<div name=\"my-alert\" className=\"my-alert-black\">*/}\n      {/*  <p>재고가 얼마 남지 않았습니다.</p>*/}\n      {/*</div>*/}\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <img src={shoe.img} width=\"100%\" />\n        </div>\n        <div className=\"col-md-6 mt-4\">\n          <h4 className=\"pt-5\">{shoe.title}</h4>\n          <p>{shoe.content}</p>\n          <p>{shoe.price}</p>\n          <Stock stock={stocks[shoe.id]}></Stock>\n\n          <Form>\n            <Form.Group controlId=\"exampleForm.SelectCustom\">\n              <Form.Label>수량 선택: {구매수량}</Form.Label>\n              <Form.Control\n                as=\"select\"\n                custom\n                onChange={(e) => {\n                  구매수량변경(e.target.value);\n                }}\n              >\n                <option selected>1</option>\n                <option>2</option>\n                <option>3</option>\n                <option>4</option>\n                <option>5</option>\n              </Form.Control>\n            </Form.Group>\n          </Form>\n\n          {/*>>> context api 사용시*/}\n          {/*<button*/}\n          {/*  className=\"btn btn-danger\"*/}\n          {/*  onClick={() => {*/}\n          {/*    let newArray = [...stocks];*/}\n          {/*    newArray[shoe.id]--;*/}\n          {/*    props.stocks변경(newArray);*/}\n          {/*  }}*/}\n          {/*>*/}\n          {/*  주문하기*/}\n          {/*</button>*/}\n\n          {/*>>> 리덕스 사용시*/}\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              props.dispatch({\n                type: \"항목추가\",\n                payload: { id: shoe.id, name: shoe.title, quan: 구매수량 },\n              });\n              history.push(\"/cart\");\n            }}\n          >\n            주문하기\n          </button>\n          <button\n            className=\"btn btn-info ml-1\"\n            onClick={() => {\n              history.goBack();\n            }}\n          >\n            뒤로가기\n          </button>\n          {/*<button*/}\n          {/*  className=\"btn btn-danger\"*/}\n          {/*  onClick={() => {*/}\n          {/*    history.push(\"/\");*/}\n          {/*  }}*/}\n          {/*>*/}\n          {/*  메인페이지로 이동*/}\n          {/*</button>*/}\n        </div>\n      </div>\n\n      <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\n        <Nav.Item className=\"col-4\">\n          <Nav.Link\n            eventKey=\"link-0\"\n            onClick={() => {\n              스위치변경(false);\n              누른탭변경(0);\n            }}\n          >\n            상세설명\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item className=\"col-4\">\n          <Nav.Link\n            eventKey=\"link-1\"\n            onClick={() => {\n              스위치변경(false);\n              누른탭변경(1);\n            }}\n          >\n            이용후기\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item className=\"col-4\">\n          <Nav.Link\n            eventKey=\"link-2\"\n            onClick={() => {\n              스위치변경(false);\n              누른탭변경(2);\n            }}\n          >\n            Q&A\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n\n      <CSSTransition in={스위치} classNames=\"wow\" timeout={500}>\n        <TabContent 누른탭={누른탭} 스위치변경={스위치변경} />\n      </CSSTransition>\n    </div>\n  );\n}\n\n// Redux store에서 데이터를 가져와서, props로 만들어주는 함수\nfunction state를props화(state) {\n  console.log(state);\n  return { 장바구니state: state.reducer };\n}\n\nexport default connect(state를props화)(Detail);\n","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Cart(props) {\n  let history = useHistory();\n  return (\n    <div>\n      <Table responsive>\n        <tr>\n          <th>#</th>\n          <th>상품명</th>\n          <th>수량</th>\n          <th>변경</th>\n        </tr>\n        {props.state.map((item) => {\n          return (\n            <tr key={item.id}>\n              <td>{item.id}</td>\n              <td>{item.name}</td>\n              <td>{item.quan}</td>\n              <td>\n                <button\n                  className=\"btn-light\"\n                  onClick={() => {\n                    props.dispatch({\n                      type: \"수량증가\",\n                      payload: { id: item.id },\n                    });\n                  }}\n                >\n                  +\n                </button>\n                <button\n                  className=\"btn-light\"\n                  onClick={() => {\n                    props.dispatch({\n                      type: \"수량감소\",\n                      payload: { id: item.id },\n                    });\n                  }}\n                >\n                  -\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </Table>\n      {props.alert열렸니 === true ? (\n        <div className=\"my-alert\">\n          <p>지금 구매하시면 20% 할인</p>\n          <button\n            onClick={() => {\n              props.dispatch({ type: \"alert닫기\" });\n            }}\n          >\n            닫기\n          </button>\n        </div>\n      ) : null}\n\n      <button\n        className=\"btn btn-info ml-1\"\n        onClick={() => {\n          history.goBack();\n        }}\n      >\n        뒤로가기\n      </button>\n    </div>\n  );\n}\n\n// Redux store에서 데이터를 가져와서, props로 만들어주는 함수\nfunction state를props화(state) {\n  return { state: state.reducer, alert열렸니: state.장바구니alertReducer };\n}\n\nexport default connect(state를props화)(Cart);\n\n//export default Cart;\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { Button, Jumbotron, Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport Data from \"./data\";\nimport Product from \"./components/Product\";\nimport Detail from \"./components/Detail\";\nimport Cart from \"./components/Cart\";\n\nimport axios from \"axios\";\nimport { Link, Route, Switch } from \"react-router-dom\";\n\n//const Product = lazy(() => import(\"./components/Product\"));\n//const Detail = lazy(() => import(\"./components/Detail\"));\n\n// 같은 값을 공유할 범위 context 설정\n// 외부 컴포넌트의 경우 export, import 사용 필요\nexport const StocksContext = React.createContext(\"StocksContext\");\n\nfunction App() {\n  let [shoes, shoes변경] = useState(Data);\n  let [stocks, stocks변경] = useState([10, 11, 12]);\n\n  let shoes추가 = (data) => {\n    let newArray = [...shoes];\n    data.map((item) => {\n      item.img = \"https://codingapple1.github.io/shop/shoes1.jpg\";\n      newArray.push(item);\n    });\n    shoes변경(newArray);\n\n    // 재고도 추가 처리\n    stocks추가();\n  };\n\n  let stocks추가 = () => {\n    let newArray = [...stocks];\n    newArray.push(100);\n    stocks변경(newArray);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/\">Shoes mall</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link as={Link} to=\"/\">\n              Home\n            </Nav.Link>\n            <Nav.Link as={Link} to=\"/detail/0\">\n              Detail\n            </Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">\n                Another action\n              </NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">\n                Separated link\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      {/* Switch : 라우터중에 가장 먼저 매칭되는거 선택해주세요.*/}\n      <Switch>\n        <Route exact path=\"/\">\n          <Jumbotron className=\"background\">\n            <h1>20% Season OFF</h1>\n            <p>\n              A Shoes sale is one that offers some sort of savings but only for\n              a short time. A good flash sale creates urgency, hype, and a spike\n              in sales.\n            </p>\n            <p>\n              <Button variant=\"primary\">Learn more</Button>\n            </p>\n          </Jumbotron>\n\n          <div className=\"container\">\n            {/*공유할 값을 value에 담는다.*/}\n            <StocksContext.Provider value={stocks}>\n              <div className=\"row\">\n                {shoes.map((item) => {\n                  return (\n                    <Product\n                      item={item}\n                      key={item.id}\n                      stocks={stocks}\n                    ></Product>\n                  );\n                })}\n              </div>\n            </StocksContext.Provider>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                axios\n                  .get(\"https://codingapple1.github.io/shop/data2.json\")\n                  .then((result) => {\n                    console.log(\"호출 성공 :\", result.data);\n                    shoes추가(result.data);\n                  })\n                  .catch(() => {\n                    console.log(\"호출 실패\");\n                  });\n              }}\n            >\n              더보기\n            </button>\n          </div>\n        </Route>\n\n        <Route path=\"/detail/:id\">\n          <StocksContext.Provider value={stocks}>\n            <Detail shoes={shoes} stocks={stocks} stocks변경={stocks변경} />\n          </StocksContext.Provider>\n        </Route>\n\n        <Route path=\"/cart\">\n          <Cart />\n        </Route>\n\n        <Route path=\"/*\">\n          <div>잘못된 접근 입니다.</div>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { combineReducers, createStore } from \"redux\";\n\nlet 장바구니alert초기값 = true;\n\nfunction 장바구니alertReducer(state = 장바구니alert초기값, 액션) {\n  if (액션.type == \"alert닫기\") {\n    state = false;\n  }\n  return state;\n}\n\nlet 장바구니초기값 = [\n  { id: 0, name: \"멋진신발\", quan: 2 },\n  { id: 1, name: \"멋진신발2\", quan: 2 },\n  { id: 2, name: \"멋진신발3\", quan: 2 },\n];\n\nfunction reducer(state = 장바구니초기값, 액션) {\n  if (액션.type === \"항목추가\") {\n    let copy = [...state];\n    let id = 액션.payload.id;\n\n    // 이미 장바구니에 존재 하는 상품의 경우\n    let find = copy.find((item) => item.id == id);\n    if (find) {\n      find.quan += Number(액션.payload.quan);\n    } else {\n      copy.push(액션.payload);\n    }\n\n    return copy;\n  } else if (액션.type === \"수량증가\") {\n    let id = 액션.payload.id;\n    let newArray = [...state];\n    newArray.find((item) => item.id == id).quan++;\n\n    return newArray;\n  } else if (액션.type === \"수량감소\") {\n    let newArray = [...state];\n    let id = 액션.payload.id;\n    let newQuantity = newArray.find((item) => item.id == id).quan;\n\n    if (newQuantity > 0) newQuantity--;\n    newArray.find((item) => item.id == id).quan = newQuantity;\n\n    return newArray;\n  } else {\n    return state;\n  }\n}\n\nlet store = createStore(combineReducers({ reducer, 장바구니alertReducer }));\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}